name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  MIX_ENV: test

jobs:
  test:
    name: Test & Lint
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        elixir: ['1.17']
        otp: ['26', '27']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Elixir
      uses: erlef/setup-beam@v1
      with:
        elixir-version: ${{ matrix.elixir }}
        otp-version: ${{ matrix.otp }}
    
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          deps
          _build
        key: ${{ runner.os }}-mix-${{ matrix.otp }}-${{ matrix.elixir }}-${{ hashFiles('**/mix.lock') }}
        restore-keys: |
          ${{ runner.os }}-mix-${{ matrix.otp }}-${{ matrix.elixir }}-
    
    - name: Install dependencies
      run: mix deps.get
    
    - name: Check code formatting
      run: mix format --check-formatted
    
    - name: Compile code (warnings as errors)
      run: mix compile --warnings-as-errors
    
    - name: Run tests with coverage
      run: mix test --cover
    
    - name: Check test coverage threshold
      run: |
        # Run tests again and capture coverage output
        coverage_output=$(mix test --cover 2>&1)
        echo "$coverage_output"
        
        # Extract coverage percentage (look for pattern like "75.5%")
        coverage=$(echo "$coverage_output" | grep -o '[0-9]\+\.[0-9]\+%' | tail -1 | sed 's/%//')
        
        if [ -z "$coverage" ]; then
          echo "Could not extract coverage percentage, checking for integer format"
          coverage=$(echo "$coverage_output" | grep -o '[0-9]\+%' | tail -1 | sed 's/%//')
        fi
        
        if [ -z "$coverage" ]; then
          echo "‚ö†Ô∏è  Could not extract coverage percentage, skipping coverage check"
          exit 0
        fi
        
        echo "üìä Current test coverage: ${coverage}%"
        
        # Check if coverage meets minimum threshold of 25%
        threshold=25
        if (( $(echo "$coverage < $threshold" | bc -l 2>/dev/null || echo "0") )); then
          echo "‚ùå Test coverage ${coverage}% is below minimum threshold of ${threshold}%"
          exit 1
        else
          echo "‚úÖ Test coverage ${coverage}% meets minimum threshold of ${threshold}%"
        fi
    
    - name: Run linter (if available)
      run: |
        if mix help credo >/dev/null 2>&1; then
          mix credo --strict
        else
          echo "Credo not available, skipping lint"
        fi
      continue-on-error: true
    
    - name: Check for security vulnerabilities
      run: mix deps.audit
      continue-on-error: true

  format-check:
    name: Code Formatting
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Elixir
      uses: erlef/setup-beam@v1
      with:
        elixir-version: '1.17'
        otp-version: '27'
    
    - name: Check formatting
      run: mix format --check-formatted

  deps-audit:
    name: Dependencies Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Elixir
      uses: erlef/setup-beam@v1
      with:
        elixir-version: '1.17'
        otp-version: '27'
    
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          deps
          _build
        key: ${{ runner.os }}-mix-deps-audit-${{ hashFiles('**/mix.lock') }}
        restore-keys: |
          ${{ runner.os }}-mix-deps-audit-
    
    - name: Install dependencies
      run: mix deps.get
    
    - name: Audit dependencies
      run: mix deps.audit